<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the anchor button on a Spark DropDownList component.  

@see spark.components.DropDownList        
@see spark.skins.spark.DropDownListSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For dropDownList buttons, the graphics are colorized but the arrow is not. */
		static private const exclusions:Array = ["arrow"];
		
		/**
		 * @private
		 */  
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		static private const symbols:Array = ["arrowFill"];
		
		/**
		 * @private
		 */
		override public function get symbolItems():Array {return symbols};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
				fill.radiusX = cornerRadius;
				border.radiusX = cornerRadius;
			}
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- layer 0: fill -->
	<!--- @private -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<s:SolidColor color="{getStyle('backgroundColor')}"/>
		</s:fill>
	</s:Rect>
	
	<!-- layer 1: gradient fill -->
	<!--- @private -->
	<s:Rect id="gradientFill" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="{getStyle('borderColor')}" ratio="0.004" alpha="0"/>
				<s:GradientEntry color="{getStyle('borderColor')}" ratio="1" alpha="0.2"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 2: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20">
		<s:stroke>
			<s:SolidColorStroke color="{getStyle('borderColor')}"/>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 3: arrow -->
	<!--- The arrow graphic displayed in the anchor button. -->
	
	<s:Path right="8" verticalCenter="0" id="arrow"
			data="M 0 0 L 8 0 L 4 8 L 0 0">
		<s:fill>
			<s:SolidColor id="arrowFill"/>
		</s:fill>
	</s:Path>
</s:SparkSkin>
