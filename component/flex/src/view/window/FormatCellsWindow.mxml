<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 title="{Localization.FormatCells}: {measureName}"
		 creationComplete="onCreationComplete(event)"
		 close="close()">
	
	<fx:Script>
		<![CDATA[
			import com.flexmonster.pivot.vo.FormatValueObject;
			import com.flexmonster.pivot.vo.MeasureValueObject;
			
			import localizations.Localization;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable] public var measureName:String;
			public var measureUniqueName:String;
			private var _measureFormat:*;
			public var onApplyCallback:Function;
			
			[Bindable] private var dpThousandsSeparator:ArrayCollection = new ArrayCollection([
				{label: Localization.None, data: ""}, {label: Localization.Space, data: " "}, {label: ",", data: ","}]);
			[Bindable] private var dpDecimalSeparator:ArrayCollection = new ArrayCollection([
				{label: ".", data: "."}, {label: ",", data: ","}]);
			[Bindable] private var dpDecimalPlaces:ArrayCollection = new ArrayCollection([
				{label: Localization.None, data: ""}, {label: "0", data: "0"}, {label: "1", data: "1"},
				{label: "2", data: "2"}, {label: "3", data: "3"}, {label: "4", data: "4"},
				{label: "5", data: "5"}, {label: "6", data: "6"}, {label: "7", data: "7"},
				{label: "8", data: "8"}, {label: "9", data: "9"}, {label: "10", data: "10"}]);
			[Bindable] private var dpCurrencyAlign:ArrayCollection = new ArrayCollection([
				{label: Localization.Left, data: "left"}, {label: Localization.Right, data: "right"}]);
			[Bindable] private var dpTextAlign:ArrayCollection = new ArrayCollection([
				{label: Localization.Left, data: "left"}, {label: Localization.Right, data: "right"}]);
			
			public function fillForm(formatVO:*):void
			{
				if(formatVO != null){
					if(ddlTextAlign) ddlTextAlign.selectedIndex = findIndex(ddlTextAlign, formatVO.textAlign);
					if(ddlThousandsSeparator) ddlThousandsSeparator.selectedIndex = findIndex(ddlThousandsSeparator, formatVO.thousandsSeparator);
					if(ddlDecimalSeparator) ddlDecimalSeparator.selectedIndex = findIndex(ddlDecimalSeparator, formatVO.decimalSeparator);
					if(ddlDecimalPlaces) {
						var index:int = findIndex(ddlDecimalPlaces, formatVO.decimalPlaces);
						ddlDecimalPlaces.selectedIndex = (index == -1)?0:index;
					}
					if(txtCurrencySymbol) txtCurrencySymbol.text = formatVO.currencySymbol;
					if(ddlCurrencyAlign) ddlCurrencyAlign.selectedIndex = findIndex(ddlCurrencyAlign, formatVO.currencySymbolAlign);
					if(txtNullValue) txtNullValue.text = formatVO.nullValue;
				} else {
					if(ddlThousandsSeparator) ddlThousandsSeparator.selectedIndex = -1;
					if(ddlDecimalSeparator) ddlDecimalSeparator.selectedIndex = -1;
					if(ddlDecimalPlaces) ddlDecimalPlaces.selectedIndex = -1;;
					if(txtCurrencySymbol) txtCurrencySymbol.text = "";
					if(ddlCurrencyAlign) ddlCurrencyAlign.selectedIndex = -1;
					if(txtNullValue) txtNullValue.text = "";
				}
				this.callLater(ddlChange);
			}
			
			private function findIndex(target:DropDownList, item:Object):int
			{
				for(var i:int = 0; i < target.dataProvider.length; i++)
				{
					if(item == target.dataProvider.getItemAt(i).data)
					{
						return i;
						break;
					}
				}
				return -1;
			}
			
			public function set measureFormat(value:*):void
			{
				_measureFormat = value;
				fillForm(_measureFormat);
			}
			
			private function onCloseClick(event:MouseEvent):void
			{
				close();
			}
			
			private function onApplyClick(event:MouseEvent):void
			{
				var formatVO:FormatValueObject = new FormatValueObject();
				formatVO.textAlign = ddlTextAlign.selectedItem.data;
				formatVO.thousandsSeparator = ddlThousandsSeparator.selectedItem.data;
				formatVO.decimalSeparator = ddlDecimalSeparator.selectedItem.data;
				formatVO.decimalPlaces = ddlDecimalPlaces.selectedItem.data;
				formatVO.currencySymbol = txtCurrencySymbol.text;
				formatVO.currencySymbolAlign = ddlCurrencyAlign.selectedItem.data;
				formatVO.nullValue = txtNullValue.text;
				
				this.onApplyCallback(formatVO,this.measureUniqueName);
				close();
			}
			
			private function onCreationComplete(event:Event):void
			{
				this.setTitle();
				fillForm(_measureFormat);
			}
			
			public function set measuresList(dp:IList):void{
				this.ddlMeasure.dataProvider = dp;
				if (dp != null && this.measureName!=null){
					for (var i:int = 0; i < dp.length;++i){
						var m:MeasureValueObject = MeasureValueObject(dp.getItemAt(i));
						if (m.caption == this.measureName){
							this.ddlMeasure.selectedIndex = i;
							break;
						}
					}
				}
			}
			
			protected function ddlMeasureChange(event:IndexChangeEvent = null):void
			{
				var measure:MeasureValueObject = MeasureValueObject(this.ddlMeasure.selectedItem);
				if (measure != null){
					if (ddlMeasure.selectedIndex != -1) enableFields(true);
					this.measureUniqueName = measure.uniqueName;
					this.measureName = measure.caption;
					this.measureFormat = Model.getInstance().pivot.getFormat(measure.uniqueName);
					this.setTitle();
				}
			}
			
			private function setTitle():void{
				if (this.measureName)
					this.title = Localization.FormatCells + ": " + measureName;
				else
					this.title = Localization.FormatCells;
			}
			
			protected function ddlChange(event:IndexChangeEvent = null):void
			{
				if (ddlMeasure && ddlMeasure.selectedIndex == -1){
					this.enableFields(false);
					this.btnApply.enabled = false;
				} else {
					if (this.ddlTextAlign
						&& this.ddlCurrencyAlign
						&& this.ddlDecimalPlaces
						&& this.ddlDecimalSeparator
						&& this.ddlThousandsSeparator 
						&& 	(this.ddlTextAlign.selectedIndex == -1 
							|| this.ddlCurrencyAlign.selectedIndex == -1
							|| this.ddlDecimalPlaces.selectedIndex == -1
							|| this.ddlDecimalSeparator.selectedIndex == -1
							|| this.ddlThousandsSeparator.selectedIndex == -1))
							this.btnApply.enabled = false;
						else 
							this.btnApply.enabled = true;
				}
			}
			
			private function enableFields(enable:Boolean = true):void{
				if (this.ddlTextAlign && this.ddlTextAlign.enabled != enable) this.ddlTextAlign.enabled = enable;
				if (this.ddlCurrencyAlign && this.ddlCurrencyAlign.enabled != enable) this.ddlCurrencyAlign.enabled = enable;
				if (this.ddlDecimalPlaces  && this.ddlDecimalPlaces.enabled != enable) this.ddlDecimalPlaces.enabled = enable;
				if (this.ddlDecimalSeparator  && this.ddlDecimalSeparator.enabled != enable) this.ddlDecimalSeparator.enabled = enable;
				if (this.ddlThousandsSeparator  && this.ddlThousandsSeparator.enabled != enable) this.ddlThousandsSeparator.enabled = enable;
				if (this.txtCurrencySymbol && this.txtCurrencySymbol.enabled != enable) this.txtCurrencySymbol.enabled = enable;
				if (this.txtNullValue && this.txtNullValue.enabled != enable) this.txtNullValue.enabled = enable;
			}
			
			public function close():void
			{
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="20" gap="10">
		<s:VGroup>
			<s:Label text="{Localization.Value}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.TextAlign}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.ThousandsSeparator}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.DecimalSeparator}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.DecimalPlaces}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.CurrencySymbol}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.CurrencySymbolAlign}" width="100%" height="21" styleName="formLabel"/>
			<s:Label text="{Localization.NullSymbol}" width="100%" height="21" styleName="formLabel"/>
		</s:VGroup>
		<s:VGroup width="145">
			<s:DropDownList id="ddlMeasure" width="100%" labelField="caption" change="ddlMeasureChange(event)"/>
			<s:DropDownList id="ddlTextAlign" width="100%" dataProvider="{dpTextAlign}" change="ddlChange(event)" selectedIndex="0"/>
			<s:DropDownList id="ddlThousandsSeparator" width="100%" dataProvider="{dpThousandsSeparator}" change="ddlChange(event)"/>
			<s:DropDownList id="ddlDecimalSeparator" width="100%" dataProvider="{dpDecimalSeparator}" change="ddlChange(event)"/>
			<s:DropDownList id="ddlDecimalPlaces" width="100%" dataProvider="{dpDecimalPlaces}" change="ddlChange(event)"/>
			<s:TextInput id="txtCurrencySymbol" width="100%"/>
			<s:DropDownList id="ddlCurrencyAlign" width="100%" dataProvider="{dpCurrencyAlign}" change="ddlChange(event)"/>
			<s:TextInput id="txtNullValue" width="100%"/>
		</s:VGroup>
	</s:HGroup>
	<s:controlBarContent>
		<s:Button label="{Localization.Apply}" id="btnApply" buttonMode="true" click="onApplyClick(event)" enabled="false"/>
		<s:Button label="{Localization.Cancel}" buttonMode="true" click="onCloseClick(event)"/>
	</s:controlBarContent>
</s:TitleWindow>
